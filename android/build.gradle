import java.security.MessageDigest
import java.security.NoSuchAlgorithmException

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["DojahKyc_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
//    maven { url "/Users/abumuhsin/AndroidStudioProjects/dojahtest2/dojah-module/build/repo" }
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.3.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}


def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"


if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}


def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["DojahKyc_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["DojahKyc_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.dojahkyc"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  buildFeatures {
    dataBinding = true
    viewBinding = true
    buildConfig = true
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  google()
  mavenCentral()
  maven { url "https://jitpack.io" }
//  maven {
//    url = uri("https://maven.pkg.github.com/dojah-inc/sdk-kotlin")
//    credentials {
//      username = "dojah-inc"
//      password = "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"
//    }
//  }
}


def kotlin_version = getExtOrDefault("kotlinVersion")
def okhttp_version = "5.0.0-alpha.2"
def navigation = "2.5.1"
def camera_version = "1.3.0"
def glide_version = "4.16.0"

dependencies {

  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  //Dojah library
//  implementation project(':react-native-dojah_kyc:dojah_inc')
//  implementation fileTree(dir: "libs", include: ['*.aar'])
//  releaseImplementation fileTree(dir: "libs/release/", include: ['*.aar'])
//  implementation fileTree(dir: 'libs/release', include: ['*.aar'])
  implementation ('com.github.shittu33:test_jitpack:1.1.0'){
    transitive = true
  }
  //Dojah Transitive dependencies
  implementation('com.google.android.material:material:1.6.1')
  implementation "com.airbnb.android:lottie:6.1.0"
  implementation "com.kizitonwose.calendar:view:2.4.0"
  implementation "com.github.appsfeature:otp-view:1.0"
  implementation "androidx.navigation:navigation-fragment-ktx:$navigation"
  implementation "androidx.navigation:navigation-ui-ktx:$navigation"
  //Networking
  implementation "com.google.code.gson:gson:2.9.0"
  implementation "com.squareup.retrofit2:converter-gson:2.9.0"
  implementation "com.squareup.retrofit2:retrofit:2.9.0"
  implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
  implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
  implementation "com.googlecode.libphonenumber:libphonenumber:8.12.31"
  implementation 'com.google.android.gms:play-services-maps:17.0.0'
  implementation 'com.google.android.gms:play-services-places:17.0.0'
  implementation 'com.google.android.libraries.places:places:3.3.0'
  implementation 'com.github.devsideal:VectorChildFinder:1.0.0'
  implementation 'com.github.Dimezis:BlurView:version-2.0.3'
  implementation 'com.jakewharton.timber:timber:4.7.1'
  implementation 'androidx.core:core-ktx:1.8.0'
  implementation 'androidx.appcompat:appcompat:1.5.0'
  implementation 'androidx.activity:activity-ktx:1.4.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation "androidx.camera:camera-view:$camera_version"
  implementation "androidx.camera:camera-camera2:$camera_version"
  implementation "androidx.camera:camera-lifecycle:$camera_version"
  implementation "androidx.camera:camera-video:$camera_version"
  implementation 'com.android.tools:desugar_jdk_libs:1.1.5'
  implementation 'androidx.recyclerview:recyclerview:1.2.1'
  implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
  implementation 'androidx.preference:preference-ktx:1.2.0'

  implementation "com.github.bumptech.glide:glide:$glide_version"
  implementation("com.github.bumptech.glide:okhttp3-integration:$glide_version") {
    exclude group: 'glide-parent'
  }
  kapt "com.github.bumptech.glide:compiler:$glide_version"

  //Dojah
//  implementation "com.dojah_inc:dojah_android_sdk:pre-1.0.12"
}


//
//String localMavenPath = project.mkdir("build").absolutePath
//
//String aarPath = localMavenPath
//task useAar {
//  File file = project.file("libs")
//  if (file.exists() && file.isDirectory()) {
//    file.listFiles(new FileFilter() {
//      @Override
//      boolean accept(File pathname) {
//        return pathname.name.endsWith(".aar")
//      }
//    }).each { item ->
//      String aarName = item.name.substring(0, item.name.length() - 4)
//      String[] aarInfo = aarName.split("-")
//      String sha1 = getFileSha1(item)
//      String md5 = getFileMD5(item)
//      String fromStr = item.path
//      String intoStr = aarPath + "/" + aarInfo[0].replace(".", "/") + "/" + aarInfo[1] + "/" + aarInfo[2]
//      String newName = aarInfo[1] + "-" + aarInfo[2] + ".aar"
//      println("localMavenPath: " + localMavenPath)
//      println("aar: " + aarInfo + " file sha1:" + sha1 + " md5:" + md5)
//      println("aarPath: " + aarPath)
//      println("intoStr: " + intoStr)
//      println("newName: " + newName)
//      println("fromStr: " + fromStr)
//      println("intoStr: " + intoStr)
//
//      project.copy {
//        from fromStr
//        into intoStr
//        rename(item.name, newName)
//      }
//
//      project.file(intoStr + "/" + newName + ".md5").write(md5)
//      project.file(intoStr + "/" + newName + ".sha1").write(sha1)
//
//      String pomPath = intoStr + "/" + newName.substring(0, newName.length() - 4) + ".pom"
//      project.file(pomPath).write(createPomStr(aarInfo[0], aarInfo[1], aarInfo[2]))
//      project.file(pomPath + ".md5").write(getFileMD5(project.file(pomPath)))
//      project.file(pomPath + ".sha1").write(getFileSha1(project.file(pomPath)))
//
//      String metadataPath = project.file(intoStr).getParentFile().path + "/maven-metadata.xml"
//      project.file(metadataPath).write(createMetadataStr(aarInfo[0], aarInfo[1], aarInfo[2]))
//      project.file(metadataPath + ".md5").write(getFileMD5(project.file(metadataPath)))
//      project.file(metadataPath + ".sha1").write(getFileSha1(project.file(metadataPath)))
//      dependencies {
//        implementation "${aarInfo[0]}:${aarInfo[1]}:${aarInfo[2]}"
//      }
//    }
//  }
//}
//
//public static String createMetadataStr(String groupId, String artifactId, String version) {
//  return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
//    "<metadata>\n" +
//    "  <groupId>$groupId</groupId>\n" +
//    "  <artifactId>$artifactId</artifactId>\n" +
//    "  <versioning>\n" +
//    "    <release>$version</release>\n" +
//    "    <versions>\n" +
//    "      <version>$version</version>\n" +
//    "    </versions>\n" +
//    "    <lastUpdated>${new Date().format('yyyyMMdd')}000000</lastUpdated>\n" +
//    "  </versioning>\n" +
//    "</metadata>\n"
//}
//
//public static String createPomStr(String groupId, String artifactId, String version) {
//  return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
//    "<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n" +
//    "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n" +
//    "  <modelVersion>4.0.0</modelVersion>\n" +
//    "  <groupId>$groupId</groupId>\n" +
//    "  <artifactId>$artifactId</artifactId>\n" +
//    "  <version>$version</version>\n" +
//    "  <packaging>aar</packaging>\n" +
//    "</project>\n"
//}
//
//public static String getFileSha1(File file) {
//  FileInputStream input = null;
//  try {
//    input = new FileInputStream(file);
//    MessageDigest digest = MessageDigest.getInstance("SHA-1");
//    byte[] buffer = new byte[1024 * 1024 * 10];
//
//    int len = 0;
//    while ((len = input.read(buffer)) > 0) {
//      digest.update(buffer, 0, len);
//    }
//    String sha1 = new BigInteger(1, digest.digest()).toString(16);
//    int length = 40 - sha1.length();
//    if (length > 0) {
//      for (int i = 0; i < length; i++) {
//        sha1 = "0" + sha1;
//      }
//    }
//    return sha1;
//  }
//  catch (IOException e) {
//    System.out.println(e);
//  }
//  catch (NoSuchAlgorithmException e) {
//    System.out.println(e);
//  }
//  finally {
//    try {
//      if (input != null) {
//        input.close();
//      }
//    }
//    catch (IOException e) {
//      System.out.println(e);
//    }
//  }
//}
//
//public static String getFileMD5(File file) {
//  FileInputStream input = null;
//  try {
//    input = new FileInputStream(file);
//    MessageDigest digest = MessageDigest.getInstance("MD5");
//    byte[] buffer = new byte[1024 * 1024 * 10];
//
//    int len = 0;
//    while ((len = input.read(buffer)) > 0) {
//      digest.update(buffer, 0, len);
//    }
//    String md5 = new BigInteger(1, digest.digest()).toString(16);
//    int length = 32 - md5.length();
//    if (length > 0) {
//      for (int i = 0; i < length; i++) {
//        md5 = "0" + md5;
//      }
//    }
//    return md5;
//  }
//  catch (IOException e) {
//    System.out.println(e);
//  }
//  catch (NoSuchAlgorithmException e) {
//    System.out.println(e);
//  }
//  finally {
//    try {
//      if (input != null) {
//        input.close();
//      }
//    }
//    catch (IOException e) {
//      System.out.println(e);
//    }
//  }
//}
//
//
//
//
